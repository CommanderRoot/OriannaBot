import { Response, ResponseOptions } from "./response";
import * as eris from "eris";

/**
 * A response context represents some way for a command to reply to an invocation,
 * regardless of whether that invocation was done through a message or through a
 * slash command. In general, this allows for indicating activity (typing), replying
 * directly (which may have different behavior depending on whether this is the first
 * reply or a different one) and replying discreetly (either through a DM or by
 * sending an ephemeral message).
 *
 * Note that the response context should keep track of the responses created, such
 * that they can be disposed of or cleaned up when needed.
 */
export abstract class ResponseContext {
    /**
     * Acknowledge that we have received the message and are
     * currently processing it. This should not result in visual
     * activity.
     */
    public abstract acknowledgeReceival(): Promise<void>;

    /**
     * Indicate that we are currently working on processing the
     * command, usually by indicating typing in the channel.
     */
    public abstract indicateProgress(): Promise<void>;

    /**
     * Create a new textual response in the same channel as where the
     * initial command invocation took place.
     */
    public abstract createResponse(options: ResponseOptions): Promise<Response>;

    /**
     * Create a new private response, either through ephemeral messages (if
     * available) or by sending the author a private message. Note that if the
     * author does not have private messages enabled, this may error.
     */
    public abstract createPrivateResponse(options: ResponseOptions): Promise<Response>;

    /**
     * Delete all of the responses sent by this context, if possible. This should
     * never error, even when deleting failed.
     */
    public abstract deleteResponses(): Promise<void>;

    /**
     * Perform all the actions needed in order for this context to become garbage
     * collectible. Generally, this consists of removing reaction listeners and
     * attempting to clean up the reactions themselves. This method is automatically
     * invoked after roughly 15 minutes have passed, since that is the default
     * lifetime of interaction tokens generated by slash commands.
     */
    public abstract freeResponses(): Promise<void>;

    /**
     * Shorthands for various colored messages.
     */
    public readonly ok = (response: ResponseOptions = {}) => this.createResponse({ color: 0x49bd1a, ...response });
    public readonly error = (response: ResponseOptions = {}) => this.createResponse({ color: 0xfd5c5c, ...response });
    public readonly info = (response: ResponseOptions = {}) => this.createResponse({ color: 0x0a96de, ...response });
}

/**
 * A response context that simply sends messages normally in a given channel.
 * The channel can either be a text channel in a guild, or a private DM with
 * the user.
 */
export class ChannelResponseContext extends ResponseContext {
    constructor(private channelId: string, private user: dissonance.User, private bot: eris.Client) {
        super();
    }

    async acknowledgeReceival(): Promise<void> {
        // Nothing to do.
    }

    async indicateProgress(): Promise<void> {
        await this.bot.sendChannelTyping(this.channelId);
    }

    createPrivateResponse(options: ResponseOptions): Promise<Response> {
        return Promise.resolve(undefined);
    }

    createResponse(options: ResponseOptions): Promise<Response> {
        return Promise.resolve(undefined);
    }

    deleteResponses(): Promise<void> {
        return Promise.resolve(undefined);
    }

    freeResponses(): Promise<void> {
        return Promise.resolve(undefined);
    }

}